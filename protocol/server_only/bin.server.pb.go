// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.4.0
// source: bin.server.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TrialAvatarGrantRecordBin_GrantReason int32

const (
	TrialAvatarGrantRecordBin_INVALID        TrialAvatarGrantRecordBin_GrantReason = 0
	TrialAvatarGrantRecordBin_GRANT_BY_QUEST TrialAvatarGrantRecordBin_GrantReason = 1
)

// Enum value maps for TrialAvatarGrantRecordBin_GrantReason.
var (
	TrialAvatarGrantRecordBin_GrantReason_name = map[int32]string{
		0: "INVALID",
		1: "GRANT_BY_QUEST",
	}
	TrialAvatarGrantRecordBin_GrantReason_value = map[string]int32{
		"INVALID":        0,
		"GRANT_BY_QUEST": 1,
	}
)

func (x TrialAvatarGrantRecordBin_GrantReason) Enum() *TrialAvatarGrantRecordBin_GrantReason {
	p := new(TrialAvatarGrantRecordBin_GrantReason)
	*p = x
	return p
}

func (x TrialAvatarGrantRecordBin_GrantReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrialAvatarGrantRecordBin_GrantReason) Descriptor() protoreflect.EnumDescriptor {
	return file_bin_server_proto_enumTypes[0].Descriptor()
}

func (TrialAvatarGrantRecordBin_GrantReason) Type() protoreflect.EnumType {
	return &file_bin_server_proto_enumTypes[0]
}

func (x TrialAvatarGrantRecordBin_GrantReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TrialAvatarGrantRecordBin_GrantReason.Descriptor instead.
func (TrialAvatarGrantRecordBin_GrantReason) EnumDescriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{10, 0}
}

type PlayerDataBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BasicBin  *PlayerBasicCompBin  `protobuf:"bytes,1,opt,name=basic_bin,json=basicBin,proto3" json:"basic_bin,omitempty"`    // 玩家基础信息
	AvatarBin *PlayerAvatarCompBin `protobuf:"bytes,2,opt,name=avatar_bin,json=avatarBin,proto3" json:"avatar_bin,omitempty"` // 玩家角色信息
}

func (x *PlayerDataBin) Reset() {
	*x = PlayerDataBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bin_server_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerDataBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerDataBin) ProtoMessage() {}

func (x *PlayerDataBin) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerDataBin.ProtoReflect.Descriptor instead.
func (*PlayerDataBin) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{0}
}

func (x *PlayerDataBin) GetBasicBin() *PlayerBasicCompBin {
	if x != nil {
		return x.BasicBin
	}
	return nil
}

func (x *PlayerDataBin) GetAvatarBin() *PlayerAvatarCompBin {
	if x != nil {
		return x.AvatarBin
	}
	return nil
}

type PlayerBasicCompBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level                uint32            `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`                                                                                                                               // 等级
	Exp                  uint32            `protobuf:"varint,2,opt,name=exp,proto3" json:"exp,omitempty"`                                                                                                                                   // 经验
	Nickname             string            `protobuf:"bytes,3,opt,name=nickname,proto3" json:"nickname,omitempty"`                                                                                                                          // 昵称
	TotalGameTime        uint32            `protobuf:"varint,4,opt,name=total_game_time,json=totalGameTime,proto3" json:"total_game_time,omitempty"`                                                                                        // 总游戏时间
	TransNoCount         uint64            `protobuf:"varint,5,opt,name=trans_no_count,json=transNoCount,proto3" json:"trans_no_count,omitempty"`                                                                                           // ？
	IsWeatherLocked      bool              `protobuf:"varint,6,opt,name=is_weather_locked,json=isWeatherLocked,proto3" json:"is_weather_locked,omitempty"`                                                                                  // 是否锁定天气
	IsGameTimeLocked     bool              `protobuf:"varint,7,opt,name=is_game_time_locked,json=isGameTimeLocked,proto3" json:"is_game_time_locked,omitempty"`                                                                             // 是否锁定游戏内时间
	PersistStaminaLimit  float32           `protobuf:"fixed32,8,opt,name=persist_stamina_limit,json=persistStaminaLimit,proto3" json:"persist_stamina_limit,omitempty"`                                                                     // 体力限制
	CurPersistStamina    float32           `protobuf:"fixed32,9,opt,name=cur_persist_stamina,json=curPersistStamina,proto3" json:"cur_persist_stamina,omitempty"`                                                                           // 主体力
	CurTemporaryStamina  float32           `protobuf:"fixed32,10,opt,name=cur_temporary_stamina,json=curTemporaryStamina,proto3" json:"cur_temporary_stamina,omitempty"`                                                                    // 临时体力
	OpenStateMap         map[uint32]uint32 `protobuf:"bytes,11,rep,name=open_state_map,json=openStateMap,proto3" json:"open_state_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // 地图开放状态
	PlayerTimeMs         uint64            `protobuf:"varint,12,opt,name=player_time_ms,json=playerTimeMs,proto3" json:"player_time_ms,omitempty"`                                                                                          // 玩家时间
	LastLoginTime        uint32            `protobuf:"fixed32,13,opt,name=last_login_time,json=lastLoginTime,proto3" json:"last_login_time,omitempty"`                                                                                      // 最后登录时间
	RegisterTime         uint32            `protobuf:"fixed32,14,opt,name=register_time,json=registerTime,proto3" json:"register_time,omitempty"`                                                                                           // 注册时间
	TotalLoginDays       uint32            `protobuf:"varint,15,opt,name=total_login_days,json=totalLoginDays,proto3" json:"total_login_days,omitempty"`                                                                                    // 总登录天数
	UpdateLoginDaysTime  uint32            `protobuf:"varint,16,opt,name=update_login_days_time,json=updateLoginDaysTime,proto3" json:"update_login_days_time,omitempty"`                                                                   // 更新登录天数时间 ？
	RewardTakenLevelList []uint32          `protobuf:"varint,17,rep,packed,name=reward_taken_level_list,json=rewardTakenLevelList,proto3" json:"reward_taken_level_list,omitempty"`                                                         // 等级奖励列表
	LanguageType         uint32            `protobuf:"varint,18,opt,name=language_type,json=languageType,proto3" json:"language_type,omitempty"`                                                                                            // 语言
	ClientAppVersion     string            `protobuf:"bytes,19,opt,name=client_app_version,json=clientAppVersion,proto3" json:"client_app_version,omitempty"`                                                                               // 客户端版本
	ClientDeviceInfo     string            `protobuf:"bytes,20,opt,name=client_device_info,json=clientDeviceInfo,proto3" json:"client_device_info,omitempty"`                                                                               // 客户端设备信息
	ClientSystemVersion  string            `protobuf:"bytes,21,opt,name=client_system_version,json=clientSystemVersion,proto3" json:"client_system_version,omitempty"`                                                                      // 客户端系统版本
	IsGuest              bool              `protobuf:"varint,22,opt,name=is_guest,json=isGuest,proto3" json:"is_guest,omitempty"`                                                                                                           // 是否游客登录
	OnlineTime           uint32            `protobuf:"varint,23,opt,name=online_time,json=onlineTime,proto3" json:"online_time,omitempty"`                                                                                                  // 在线时间？
	IsProficientPlayer   bool              `protobuf:"varint,24,opt,name=is_proficient_player,json=isProficientPlayer,proto3" json:"is_proficient_player,omitempty"`                                                                        // 是否老玩家
	SetLanguageTag       uint32            `protobuf:"varint,26,opt,name=set_language_tag,json=setLanguageTag,proto3" json:"set_language_tag,omitempty"`                                                                                    // 设置语言标签
	HeadImageAvatarId    uint32            `protobuf:"varint,27,opt,name=head_image_avatar_id,json=headImageAvatarId,proto3" json:"head_image_avatar_id,omitempty"`                                                                         // 头像id
	GuidSeqId            uint32            `protobuf:"varint,28,opt,name=guid_seq_id,json=guidSeqId,proto3" json:"guid_seq_id,omitempty"`                                                                                                   // 全局唯一id
	IsRebateMailSent     bool              `protobuf:"varint,29,opt,name=is_rebate_mail_sent,json=isRebateMailSent,proto3" json:"is_rebate_mail_sent,omitempty"`                                                                            // 是否发送回扣邮件
	IsRebateMailReceived bool              `protobuf:"varint,30,opt,name=is_rebate_mail_received,json=isRebateMailReceived,proto3" json:"is_rebate_mail_received,omitempty"`                                                                // 是收到的回扣邮件
	RegisterCps          string            `protobuf:"bytes,31,opt,name=register_cps,json=registerCps,proto3" json:"register_cps,omitempty"`                                                                                                // 注册广告？
}

func (x *PlayerBasicCompBin) Reset() {
	*x = PlayerBasicCompBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bin_server_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerBasicCompBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerBasicCompBin) ProtoMessage() {}

func (x *PlayerBasicCompBin) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerBasicCompBin.ProtoReflect.Descriptor instead.
func (*PlayerBasicCompBin) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{1}
}

func (x *PlayerBasicCompBin) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *PlayerBasicCompBin) GetExp() uint32 {
	if x != nil {
		return x.Exp
	}
	return 0
}

func (x *PlayerBasicCompBin) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *PlayerBasicCompBin) GetTotalGameTime() uint32 {
	if x != nil {
		return x.TotalGameTime
	}
	return 0
}

func (x *PlayerBasicCompBin) GetTransNoCount() uint64 {
	if x != nil {
		return x.TransNoCount
	}
	return 0
}

func (x *PlayerBasicCompBin) GetIsWeatherLocked() bool {
	if x != nil {
		return x.IsWeatherLocked
	}
	return false
}

func (x *PlayerBasicCompBin) GetIsGameTimeLocked() bool {
	if x != nil {
		return x.IsGameTimeLocked
	}
	return false
}

func (x *PlayerBasicCompBin) GetPersistStaminaLimit() float32 {
	if x != nil {
		return x.PersistStaminaLimit
	}
	return 0
}

func (x *PlayerBasicCompBin) GetCurPersistStamina() float32 {
	if x != nil {
		return x.CurPersistStamina
	}
	return 0
}

func (x *PlayerBasicCompBin) GetCurTemporaryStamina() float32 {
	if x != nil {
		return x.CurTemporaryStamina
	}
	return 0
}

func (x *PlayerBasicCompBin) GetOpenStateMap() map[uint32]uint32 {
	if x != nil {
		return x.OpenStateMap
	}
	return nil
}

func (x *PlayerBasicCompBin) GetPlayerTimeMs() uint64 {
	if x != nil {
		return x.PlayerTimeMs
	}
	return 0
}

func (x *PlayerBasicCompBin) GetLastLoginTime() uint32 {
	if x != nil {
		return x.LastLoginTime
	}
	return 0
}

func (x *PlayerBasicCompBin) GetRegisterTime() uint32 {
	if x != nil {
		return x.RegisterTime
	}
	return 0
}

func (x *PlayerBasicCompBin) GetTotalLoginDays() uint32 {
	if x != nil {
		return x.TotalLoginDays
	}
	return 0
}

func (x *PlayerBasicCompBin) GetUpdateLoginDaysTime() uint32 {
	if x != nil {
		return x.UpdateLoginDaysTime
	}
	return 0
}

func (x *PlayerBasicCompBin) GetRewardTakenLevelList() []uint32 {
	if x != nil {
		return x.RewardTakenLevelList
	}
	return nil
}

func (x *PlayerBasicCompBin) GetLanguageType() uint32 {
	if x != nil {
		return x.LanguageType
	}
	return 0
}

func (x *PlayerBasicCompBin) GetClientAppVersion() string {
	if x != nil {
		return x.ClientAppVersion
	}
	return ""
}

func (x *PlayerBasicCompBin) GetClientDeviceInfo() string {
	if x != nil {
		return x.ClientDeviceInfo
	}
	return ""
}

func (x *PlayerBasicCompBin) GetClientSystemVersion() string {
	if x != nil {
		return x.ClientSystemVersion
	}
	return ""
}

func (x *PlayerBasicCompBin) GetIsGuest() bool {
	if x != nil {
		return x.IsGuest
	}
	return false
}

func (x *PlayerBasicCompBin) GetOnlineTime() uint32 {
	if x != nil {
		return x.OnlineTime
	}
	return 0
}

func (x *PlayerBasicCompBin) GetIsProficientPlayer() bool {
	if x != nil {
		return x.IsProficientPlayer
	}
	return false
}

func (x *PlayerBasicCompBin) GetSetLanguageTag() uint32 {
	if x != nil {
		return x.SetLanguageTag
	}
	return 0
}

func (x *PlayerBasicCompBin) GetHeadImageAvatarId() uint32 {
	if x != nil {
		return x.HeadImageAvatarId
	}
	return 0
}

func (x *PlayerBasicCompBin) GetGuidSeqId() uint32 {
	if x != nil {
		return x.GuidSeqId
	}
	return 0
}

func (x *PlayerBasicCompBin) GetIsRebateMailSent() bool {
	if x != nil {
		return x.IsRebateMailSent
	}
	return false
}

func (x *PlayerBasicCompBin) GetIsRebateMailReceived() bool {
	if x != nil {
		return x.IsRebateMailReceived
	}
	return false
}

func (x *PlayerBasicCompBin) GetRegisterCps() string {
	if x != nil {
		return x.RegisterCps
	}
	return ""
}

type PlayerAvatarCompBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvatarList                     []*AvatarBin              `protobuf:"bytes,1,rep,name=avatar_list,json=avatarList,proto3" json:"avatar_list,omitempty"`                                                                                                                    // 角色列表
	CurAvatarGuid                  uint64                    `protobuf:"varint,2,opt,name=cur_avatar_guid,json=curAvatarGuid,proto3" json:"cur_avatar_guid,omitempty"`                                                                                                        // 当前角色唯一id
	PbOnlyCurPos                   *VectorBin                `protobuf:"bytes,3,opt,name=pb_only_cur_pos,json=pbOnlyCurPos,proto3" json:"pb_only_cur_pos,omitempty"`                                                                                                          // 当前数据库坐标
	PbOnlyCurRot                   *VectorBin                `protobuf:"bytes,4,opt,name=pb_only_cur_rot,json=pbOnlyCurRot,proto3" json:"pb_only_cur_rot,omitempty"`                                                                                                          // 当前数据库朝向
	TeamMap                        map[uint32]*AvatarTeamBin `protobuf:"bytes,5,rep,name=team_map,json=teamMap,proto3" json:"team_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`                                    // 队伍
	CurTeamId                      uint32                    `protobuf:"varint,6,opt,name=cur_team_id,json=curTeamId,proto3" json:"cur_team_id,omitempty"`                                                                                                                    // 当前队伍id
	LastChangeAvatarTime           uint64                    `protobuf:"varint,7,opt,name=last_change_avatar_time,json=lastChangeAvatarTime,proto3" json:"last_change_avatar_time,omitempty"`                                                                                 // 最后更改角色时间
	IsSpringAutoUse                bool                      `protobuf:"varint,8,opt,name=is_spring_auto_use,json=isSpringAutoUse,proto3" json:"is_spring_auto_use,omitempty"`                                                                                                // 是否自动使用？
	SpringAutoUsePercent           uint32                    `protobuf:"varint,9,opt,name=spring_auto_use_percent,json=springAutoUsePercent,proto3" json:"spring_auto_use_percent,omitempty"`                                                                                 // 自动使用百分比？
	LastBackgroudAvatarRecoverTime uint32                    `protobuf:"fixed32,10,opt,name=last_backgroud_avatar_recover_time,json=lastBackgroudAvatarRecoverTime,proto3" json:"last_backgroud_avatar_recover_time,omitempty"`                                               // 最后角色背景重置时间？
	CurSpringVolume                uint32                    `protobuf:"varint,11,opt,name=cur_spring_volume,json=curSpringVolume,proto3" json:"cur_spring_volume,omitempty"`                                                                                                 // 当前****？
	IsFlyable                      bool                      `protobuf:"varint,12,opt,name=is_flyable,json=isFlyable,proto3" json:"is_flyable,omitempty"`                                                                                                                     // 是否有风之翼
	IsTransferable                 bool                      `protobuf:"varint,13,opt,name=is_transferable,json=isTransferable,proto3" json:"is_transferable,omitempty"`                                                                                                      // 是否可以转移？
	LastAvatarGuid                 uint32                    `protobuf:"varint,14,opt,name=last_avatar_guid,json=lastAvatarGuid,proto3" json:"last_avatar_guid,omitempty"`                                                                                                    // 最后一个角色全局id？
	ChooseAvatarGuid               uint64                    `protobuf:"varint,15,opt,name=choose_avatar_guid,json=chooseAvatarGuid,proto3" json:"choose_avatar_guid,omitempty"`                                                                                              // 选择角色全局id？
	DieType                        uint32                    `protobuf:"varint,16,opt,name=die_type,json=dieType,proto3" json:"die_type,omitempty"`                                                                                                                           // 类型？
	TempAvatarGuidList             []uint64                  `protobuf:"varint,17,rep,packed,name=temp_avatar_guid_list,json=tempAvatarGuidList,proto3" json:"temp_avatar_guid_list,omitempty"`                                                                               // 队伍全局id列表
	AvatarTeamBuffMap              map[uint32]*AvatarBuffBin `protobuf:"bytes,18,rep,name=avatar_team_buff_map,json=avatarTeamBuffMap,proto3" json:"avatar_team_buff_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 角色队伍buff
	LastServerBuffUid              uint32                    `protobuf:"varint,19,opt,name=last_server_buff_uid,json=lastServerBuffUid,proto3" json:"last_server_buff_uid,omitempty"`                                                                                         // 最后服务器buff uid？
	TotalExpeditionNum             uint32                    `protobuf:"varint,20,opt,name=total_expedition_num,json=totalExpeditionNum,proto3" json:"total_expedition_num,omitempty"`                                                                                        // 总冒险数量？
	OwnedFlycloakList              []uint32                  `protobuf:"varint,21,rep,packed,name=owned_flycloak_list,json=ownedFlycloakList,proto3" json:"owned_flycloak_list,omitempty"`                                                                                    // 拥有的风之翼列表
}

func (x *PlayerAvatarCompBin) Reset() {
	*x = PlayerAvatarCompBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bin_server_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerAvatarCompBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerAvatarCompBin) ProtoMessage() {}

func (x *PlayerAvatarCompBin) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerAvatarCompBin.ProtoReflect.Descriptor instead.
func (*PlayerAvatarCompBin) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{2}
}

func (x *PlayerAvatarCompBin) GetAvatarList() []*AvatarBin {
	if x != nil {
		return x.AvatarList
	}
	return nil
}

func (x *PlayerAvatarCompBin) GetCurAvatarGuid() uint64 {
	if x != nil {
		return x.CurAvatarGuid
	}
	return 0
}

func (x *PlayerAvatarCompBin) GetPbOnlyCurPos() *VectorBin {
	if x != nil {
		return x.PbOnlyCurPos
	}
	return nil
}

func (x *PlayerAvatarCompBin) GetPbOnlyCurRot() *VectorBin {
	if x != nil {
		return x.PbOnlyCurRot
	}
	return nil
}

func (x *PlayerAvatarCompBin) GetTeamMap() map[uint32]*AvatarTeamBin {
	if x != nil {
		return x.TeamMap
	}
	return nil
}

func (x *PlayerAvatarCompBin) GetCurTeamId() uint32 {
	if x != nil {
		return x.CurTeamId
	}
	return 0
}

func (x *PlayerAvatarCompBin) GetLastChangeAvatarTime() uint64 {
	if x != nil {
		return x.LastChangeAvatarTime
	}
	return 0
}

func (x *PlayerAvatarCompBin) GetIsSpringAutoUse() bool {
	if x != nil {
		return x.IsSpringAutoUse
	}
	return false
}

func (x *PlayerAvatarCompBin) GetSpringAutoUsePercent() uint32 {
	if x != nil {
		return x.SpringAutoUsePercent
	}
	return 0
}

func (x *PlayerAvatarCompBin) GetLastBackgroudAvatarRecoverTime() uint32 {
	if x != nil {
		return x.LastBackgroudAvatarRecoverTime
	}
	return 0
}

func (x *PlayerAvatarCompBin) GetCurSpringVolume() uint32 {
	if x != nil {
		return x.CurSpringVolume
	}
	return 0
}

func (x *PlayerAvatarCompBin) GetIsFlyable() bool {
	if x != nil {
		return x.IsFlyable
	}
	return false
}

func (x *PlayerAvatarCompBin) GetIsTransferable() bool {
	if x != nil {
		return x.IsTransferable
	}
	return false
}

func (x *PlayerAvatarCompBin) GetLastAvatarGuid() uint32 {
	if x != nil {
		return x.LastAvatarGuid
	}
	return 0
}

func (x *PlayerAvatarCompBin) GetChooseAvatarGuid() uint64 {
	if x != nil {
		return x.ChooseAvatarGuid
	}
	return 0
}

func (x *PlayerAvatarCompBin) GetDieType() uint32 {
	if x != nil {
		return x.DieType
	}
	return 0
}

func (x *PlayerAvatarCompBin) GetTempAvatarGuidList() []uint64 {
	if x != nil {
		return x.TempAvatarGuidList
	}
	return nil
}

func (x *PlayerAvatarCompBin) GetAvatarTeamBuffMap() map[uint32]*AvatarBuffBin {
	if x != nil {
		return x.AvatarTeamBuffMap
	}
	return nil
}

func (x *PlayerAvatarCompBin) GetLastServerBuffUid() uint32 {
	if x != nil {
		return x.LastServerBuffUid
	}
	return 0
}

func (x *PlayerAvatarCompBin) GetTotalExpeditionNum() uint32 {
	if x != nil {
		return x.TotalExpeditionNum
	}
	return 0
}

func (x *PlayerAvatarCompBin) GetOwnedFlycloakList() []uint32 {
	if x != nil {
		return x.OwnedFlycloakList
	}
	return nil
}

type AvatarBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Detail:
	//
	//	*AvatarBin_FormalAvatar
	//	*AvatarBin_TrialAvatar
	//	*AvatarBin_MirrorAvatar
	Detail               isAvatarBin_Detail              `protobuf_oneof:"detail"`
	AvatarType           uint32                          `protobuf:"varint,1,opt,name=avatar_type,json=avatarType,proto3" json:"avatar_type,omitempty"`
	AvatarId             uint32                          `protobuf:"varint,2,opt,name=avatar_id,json=avatarId,proto3" json:"avatar_id,omitempty"`
	Guid                 uint64                          `protobuf:"varint,3,opt,name=guid,proto3" json:"guid,omitempty"`
	Level                uint32                          `protobuf:"varint,4,opt,name=level,proto3" json:"level,omitempty"`
	LifeState            uint32                          `protobuf:"varint,5,opt,name=life_state,json=lifeState,proto3" json:"life_state,omitempty"`
	CurHp                float32                         `protobuf:"fixed32,6,opt,name=cur_hp,json=curHp,proto3" json:"cur_hp,omitempty"`
	CurElemEnergy        float32                         `protobuf:"fixed32,7,opt,name=cur_elem_energy,json=curElemEnergy,proto3" json:"cur_elem_energy,omitempty"`
	PromoteLevel         uint32                          `protobuf:"varint,8,opt,name=promote_level,json=promoteLevel,proto3" json:"promote_level,omitempty"`
	SkillDepotId         uint32                          `protobuf:"varint,9,opt,name=skill_depot_id,json=skillDepotId,proto3" json:"skill_depot_id,omitempty"`
	SkillMap             map[uint32]*AvatarSkillBin      `protobuf:"bytes,10,rep,name=skill_map,json=skillMap,proto3" json:"skill_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	BuffMap              map[uint32]*AvatarBuffBin       `protobuf:"bytes,11,rep,name=buff_map,json=buffMap,proto3" json:"buff_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DepotMap             map[uint32]*AvatarSkillDepotBin `protobuf:"bytes,12,rep,name=depot_map,json=depotMap,proto3" json:"depot_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	EquipList            []*ItemBin                      `protobuf:"bytes,13,rep,name=equip_list,json=equipList,proto3" json:"equip_list,omitempty"`
	SatiationVal         float32                         `protobuf:"fixed32,14,opt,name=satiation_val,json=satiationVal,proto3" json:"satiation_val,omitempty"`
	SatiationPenaltyTime float32                         `protobuf:"fixed32,15,opt,name=satiation_penalty_time,json=satiationPenaltyTime,proto3" json:"satiation_penalty_time,omitempty"`
	FlycloakId           uint32                          `protobuf:"varint,16,opt,name=flycloak_id,json=flycloakId,proto3" json:"flycloak_id,omitempty"`
	AvatarEquipAffixList []*AvatarEquipAffixBin          `protobuf:"bytes,17,rep,name=avatar_equip_affix_list,json=avatarEquipAffixList,proto3" json:"avatar_equip_affix_list,omitempty"`
	BornTime             uint32                          `protobuf:"varint,18,opt,name=born_time,json=bornTime,proto3" json:"born_time,omitempty"`
}

func (x *AvatarBin) Reset() {
	*x = AvatarBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bin_server_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvatarBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvatarBin) ProtoMessage() {}

func (x *AvatarBin) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvatarBin.ProtoReflect.Descriptor instead.
func (*AvatarBin) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{3}
}

func (m *AvatarBin) GetDetail() isAvatarBin_Detail {
	if m != nil {
		return m.Detail
	}
	return nil
}

func (x *AvatarBin) GetFormalAvatar() *FormalAvatarBin {
	if x, ok := x.GetDetail().(*AvatarBin_FormalAvatar); ok {
		return x.FormalAvatar
	}
	return nil
}

func (x *AvatarBin) GetTrialAvatar() *TrialAvatarBin {
	if x, ok := x.GetDetail().(*AvatarBin_TrialAvatar); ok {
		return x.TrialAvatar
	}
	return nil
}

func (x *AvatarBin) GetMirrorAvatar() *MirrorAvatarBin {
	if x, ok := x.GetDetail().(*AvatarBin_MirrorAvatar); ok {
		return x.MirrorAvatar
	}
	return nil
}

func (x *AvatarBin) GetAvatarType() uint32 {
	if x != nil {
		return x.AvatarType
	}
	return 0
}

func (x *AvatarBin) GetAvatarId() uint32 {
	if x != nil {
		return x.AvatarId
	}
	return 0
}

func (x *AvatarBin) GetGuid() uint64 {
	if x != nil {
		return x.Guid
	}
	return 0
}

func (x *AvatarBin) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *AvatarBin) GetLifeState() uint32 {
	if x != nil {
		return x.LifeState
	}
	return 0
}

func (x *AvatarBin) GetCurHp() float32 {
	if x != nil {
		return x.CurHp
	}
	return 0
}

func (x *AvatarBin) GetCurElemEnergy() float32 {
	if x != nil {
		return x.CurElemEnergy
	}
	return 0
}

func (x *AvatarBin) GetPromoteLevel() uint32 {
	if x != nil {
		return x.PromoteLevel
	}
	return 0
}

func (x *AvatarBin) GetSkillDepotId() uint32 {
	if x != nil {
		return x.SkillDepotId
	}
	return 0
}

func (x *AvatarBin) GetSkillMap() map[uint32]*AvatarSkillBin {
	if x != nil {
		return x.SkillMap
	}
	return nil
}

func (x *AvatarBin) GetBuffMap() map[uint32]*AvatarBuffBin {
	if x != nil {
		return x.BuffMap
	}
	return nil
}

func (x *AvatarBin) GetDepotMap() map[uint32]*AvatarSkillDepotBin {
	if x != nil {
		return x.DepotMap
	}
	return nil
}

func (x *AvatarBin) GetEquipList() []*ItemBin {
	if x != nil {
		return x.EquipList
	}
	return nil
}

func (x *AvatarBin) GetSatiationVal() float32 {
	if x != nil {
		return x.SatiationVal
	}
	return 0
}

func (x *AvatarBin) GetSatiationPenaltyTime() float32 {
	if x != nil {
		return x.SatiationPenaltyTime
	}
	return 0
}

func (x *AvatarBin) GetFlycloakId() uint32 {
	if x != nil {
		return x.FlycloakId
	}
	return 0
}

func (x *AvatarBin) GetAvatarEquipAffixList() []*AvatarEquipAffixBin {
	if x != nil {
		return x.AvatarEquipAffixList
	}
	return nil
}

func (x *AvatarBin) GetBornTime() uint32 {
	if x != nil {
		return x.BornTime
	}
	return 0
}

type isAvatarBin_Detail interface {
	isAvatarBin_Detail()
}

type AvatarBin_FormalAvatar struct {
	FormalAvatar *FormalAvatarBin `protobuf:"bytes,101,opt,name=formal_avatar,json=formalAvatar,proto3,oneof"`
}

type AvatarBin_TrialAvatar struct {
	TrialAvatar *TrialAvatarBin `protobuf:"bytes,102,opt,name=trial_avatar,json=trialAvatar,proto3,oneof"`
}

type AvatarBin_MirrorAvatar struct {
	MirrorAvatar *MirrorAvatarBin `protobuf:"bytes,103,opt,name=mirror_avatar,json=mirrorAvatar,proto3,oneof"`
}

func (*AvatarBin_FormalAvatar) isAvatarBin_Detail() {}

func (*AvatarBin_TrialAvatar) isAvatarBin_Detail() {}

func (*AvatarBin_MirrorAvatar) isAvatarBin_Detail() {}

type AvatarTeamBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvatarGuidList    []uint64 `protobuf:"varint,1,rep,packed,name=avatar_guid_list,json=avatarGuidList,proto3" json:"avatar_guid_list,omitempty"`
	TeamName          string   `protobuf:"bytes,2,opt,name=team_name,json=teamName,proto3" json:"team_name,omitempty"`
	LastCurAvatarGuid uint64   `protobuf:"varint,3,opt,name=last_cur_avatar_guid,json=lastCurAvatarGuid,proto3" json:"last_cur_avatar_guid,omitempty"`
}

func (x *AvatarTeamBin) Reset() {
	*x = AvatarTeamBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bin_server_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvatarTeamBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvatarTeamBin) ProtoMessage() {}

func (x *AvatarTeamBin) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvatarTeamBin.ProtoReflect.Descriptor instead.
func (*AvatarTeamBin) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{4}
}

func (x *AvatarTeamBin) GetAvatarGuidList() []uint64 {
	if x != nil {
		return x.AvatarGuidList
	}
	return nil
}

func (x *AvatarTeamBin) GetTeamName() string {
	if x != nil {
		return x.TeamName
	}
	return ""
}

func (x *AvatarTeamBin) GetLastCurAvatarGuid() uint64 {
	if x != nil {
		return x.LastCurAvatarGuid
	}
	return 0
}

type AvatarBuffBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeftTime uint32 `protobuf:"varint,1,opt,name=left_time,json=leftTime,proto3" json:"left_time,omitempty"`
	BuffUid  uint32 `protobuf:"varint,2,opt,name=buff_uid,json=buffUid,proto3" json:"buff_uid,omitempty"`
	BuffType uint32 `protobuf:"varint,3,opt,name=buff_type,json=buffType,proto3" json:"buff_type,omitempty"`
}

func (x *AvatarBuffBin) Reset() {
	*x = AvatarBuffBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bin_server_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvatarBuffBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvatarBuffBin) ProtoMessage() {}

func (x *AvatarBuffBin) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvatarBuffBin.ProtoReflect.Descriptor instead.
func (*AvatarBuffBin) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{5}
}

func (x *AvatarBuffBin) GetLeftTime() uint32 {
	if x != nil {
		return x.LeftTime
	}
	return 0
}

func (x *AvatarBuffBin) GetBuffUid() uint32 {
	if x != nil {
		return x.BuffUid
	}
	return 0
}

func (x *AvatarBuffBin) GetBuffType() uint32 {
	if x != nil {
		return x.BuffType
	}
	return 0
}

type FormalAvatarBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exp               uint32               `protobuf:"varint,1,opt,name=exp,proto3" json:"exp,omitempty"`
	EquipGuidList     []uint64             `protobuf:"varint,2,rep,packed,name=equip_guid_list,json=equipGuidList,proto3" json:"equip_guid_list,omitempty"`
	Fetter            *AvatarFetterBin     `protobuf:"bytes,3,opt,name=fetter,proto3" json:"fetter,omitempty"`
	ExpeditionData    *AvatarExpeditionBin `protobuf:"bytes,4,opt,name=expedition_data,json=expeditionData,proto3" json:"expedition_data,omitempty"`
	AvatarRepeatCount uint32               `protobuf:"varint,5,opt,name=avatar_repeat_count,json=avatarRepeatCount,proto3" json:"avatar_repeat_count,omitempty"`
	IsFocus           bool                 `protobuf:"varint,6,opt,name=is_focus,json=isFocus,proto3" json:"is_focus,omitempty"`
}

func (x *FormalAvatarBin) Reset() {
	*x = FormalAvatarBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bin_server_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FormalAvatarBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormalAvatarBin) ProtoMessage() {}

func (x *FormalAvatarBin) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormalAvatarBin.ProtoReflect.Descriptor instead.
func (*FormalAvatarBin) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{6}
}

func (x *FormalAvatarBin) GetExp() uint32 {
	if x != nil {
		return x.Exp
	}
	return 0
}

func (x *FormalAvatarBin) GetEquipGuidList() []uint64 {
	if x != nil {
		return x.EquipGuidList
	}
	return nil
}

func (x *FormalAvatarBin) GetFetter() *AvatarFetterBin {
	if x != nil {
		return x.Fetter
	}
	return nil
}

func (x *FormalAvatarBin) GetExpeditionData() *AvatarExpeditionBin {
	if x != nil {
		return x.ExpeditionData
	}
	return nil
}

func (x *FormalAvatarBin) GetAvatarRepeatCount() uint32 {
	if x != nil {
		return x.AvatarRepeatCount
	}
	return 0
}

func (x *FormalAvatarBin) GetIsFocus() bool {
	if x != nil {
		return x.IsFocus
	}
	return false
}

type AvatarFetterBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level                   uint32   `protobuf:"varint,3,opt,name=level,proto3" json:"level,omitempty"`
	Exp                     uint32   `protobuf:"varint,4,opt,name=exp,proto3" json:"exp,omitempty"`
	RewardedFetterLevelList []uint32 `protobuf:"varint,6,rep,packed,name=rewarded_fetter_level_list,json=rewardedFetterLevelList,proto3" json:"rewarded_fetter_level_list,omitempty"`
	IsLoginOnBirthday       bool     `protobuf:"varint,7,opt,name=is_login_on_birthday,json=isLoginOnBirthday,proto3" json:"is_login_on_birthday,omitempty"`
}

func (x *AvatarFetterBin) Reset() {
	*x = AvatarFetterBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bin_server_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvatarFetterBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvatarFetterBin) ProtoMessage() {}

func (x *AvatarFetterBin) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvatarFetterBin.ProtoReflect.Descriptor instead.
func (*AvatarFetterBin) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{7}
}

func (x *AvatarFetterBin) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *AvatarFetterBin) GetExp() uint32 {
	if x != nil {
		return x.Exp
	}
	return 0
}

func (x *AvatarFetterBin) GetRewardedFetterLevelList() []uint32 {
	if x != nil {
		return x.RewardedFetterLevelList
	}
	return nil
}

func (x *AvatarFetterBin) GetIsLoginOnBirthday() bool {
	if x != nil {
		return x.IsLoginOnBirthday
	}
	return false
}

type AvatarExpeditionBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State        uint32  `protobuf:"varint,1,opt,name=state,proto3" json:"state,omitempty"`
	ExpId        uint32  `protobuf:"varint,2,opt,name=exp_id,json=expId,proto3" json:"exp_id,omitempty"`
	HourTime     uint32  `protobuf:"varint,3,opt,name=hour_time,json=hourTime,proto3" json:"hour_time,omitempty"`
	StartTime    uint32  `protobuf:"fixed32,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	Transaction  uint64  `protobuf:"varint,5,opt,name=transaction,proto3" json:"transaction,omitempty"`
	ShortenRatio float32 `protobuf:"fixed32,6,opt,name=shorten_ratio,json=shortenRatio,proto3" json:"shorten_ratio,omitempty"`
}

func (x *AvatarExpeditionBin) Reset() {
	*x = AvatarExpeditionBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bin_server_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvatarExpeditionBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvatarExpeditionBin) ProtoMessage() {}

func (x *AvatarExpeditionBin) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvatarExpeditionBin.ProtoReflect.Descriptor instead.
func (*AvatarExpeditionBin) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{8}
}

func (x *AvatarExpeditionBin) GetState() uint32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *AvatarExpeditionBin) GetExpId() uint32 {
	if x != nil {
		return x.ExpId
	}
	return 0
}

func (x *AvatarExpeditionBin) GetHourTime() uint32 {
	if x != nil {
		return x.HourTime
	}
	return 0
}

func (x *AvatarExpeditionBin) GetStartTime() uint32 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *AvatarExpeditionBin) GetTransaction() uint64 {
	if x != nil {
		return x.Transaction
	}
	return 0
}

func (x *AvatarExpeditionBin) GetShortenRatio() float32 {
	if x != nil {
		return x.ShortenRatio
	}
	return 0
}

type TrialAvatarBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrialAvatarId  uint32                     `protobuf:"varint,1,opt,name=trial_avatar_id,json=trialAvatarId,proto3" json:"trial_avatar_id,omitempty"`
	GrantRecordBin *TrialAvatarGrantRecordBin `protobuf:"bytes,2,opt,name=grant_record_bin,json=grantRecordBin,proto3" json:"grant_record_bin,omitempty"`
}

func (x *TrialAvatarBin) Reset() {
	*x = TrialAvatarBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bin_server_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrialAvatarBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrialAvatarBin) ProtoMessage() {}

func (x *TrialAvatarBin) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrialAvatarBin.ProtoReflect.Descriptor instead.
func (*TrialAvatarBin) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{9}
}

func (x *TrialAvatarBin) GetTrialAvatarId() uint32 {
	if x != nil {
		return x.TrialAvatarId
	}
	return 0
}

func (x *TrialAvatarBin) GetGrantRecordBin() *TrialAvatarGrantRecordBin {
	if x != nil {
		return x.GrantRecordBin
	}
	return nil
}

type TrialAvatarGrantRecordBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GrantReason       uint32 `protobuf:"varint,1,opt,name=grant_reason,json=grantReason,proto3" json:"grant_reason,omitempty"`
	FromParentQuestId uint32 `protobuf:"varint,2,opt,name=from_parent_quest_id,json=fromParentQuestId,proto3" json:"from_parent_quest_id,omitempty"`
}

func (x *TrialAvatarGrantRecordBin) Reset() {
	*x = TrialAvatarGrantRecordBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bin_server_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrialAvatarGrantRecordBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrialAvatarGrantRecordBin) ProtoMessage() {}

func (x *TrialAvatarGrantRecordBin) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrialAvatarGrantRecordBin.ProtoReflect.Descriptor instead.
func (*TrialAvatarGrantRecordBin) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{10}
}

func (x *TrialAvatarGrantRecordBin) GetGrantReason() uint32 {
	if x != nil {
		return x.GrantReason
	}
	return 0
}

func (x *TrialAvatarGrantRecordBin) GetFromParentQuestId() uint32 {
	if x != nil {
		return x.FromParentQuestId
	}
	return 0
}

type MirrorAvatarBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MirrorAvatarBin) Reset() {
	*x = MirrorAvatarBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bin_server_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MirrorAvatarBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MirrorAvatarBin) ProtoMessage() {}

func (x *MirrorAvatarBin) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MirrorAvatarBin.ProtoReflect.Descriptor instead.
func (*MirrorAvatarBin) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{11}
}

type AvatarSkillBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PassCdTime     uint32   `protobuf:"varint,1,opt,name=pass_cd_time,json=passCdTime,proto3" json:"pass_cd_time,omitempty"`
	FullCdTimeList []uint32 `protobuf:"varint,2,rep,packed,name=full_cd_time_list,json=fullCdTimeList,proto3" json:"full_cd_time_list,omitempty"`
}

func (x *AvatarSkillBin) Reset() {
	*x = AvatarSkillBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bin_server_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvatarSkillBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvatarSkillBin) ProtoMessage() {}

func (x *AvatarSkillBin) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvatarSkillBin.ProtoReflect.Descriptor instead.
func (*AvatarSkillBin) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{12}
}

func (x *AvatarSkillBin) GetPassCdTime() uint32 {
	if x != nil {
		return x.PassCdTime
	}
	return 0
}

func (x *AvatarSkillBin) GetFullCdTimeList() []uint32 {
	if x != nil {
		return x.FullCdTimeList
	}
	return nil
}

type AvatarSkillDepotBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TalentIdList           []uint32          `protobuf:"varint,1,rep,packed,name=talent_id_list,json=talentIdList,proto3" json:"talent_id_list,omitempty"`
	CoreProudSkillLevel    uint32            `protobuf:"varint,2,opt,name=core_proud_skill_level,json=coreProudSkillLevel,proto3" json:"core_proud_skill_level,omitempty"`
	InherentProudSkillList []uint32          `protobuf:"varint,3,rep,packed,name=inherent_proud_skill_list,json=inherentProudSkillList,proto3" json:"inherent_proud_skill_list,omitempty"`
	SkillLevelMap          map[uint32]uint32 `protobuf:"bytes,4,rep,name=skill_level_map,json=skillLevelMap,proto3" json:"skill_level_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *AvatarSkillDepotBin) Reset() {
	*x = AvatarSkillDepotBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bin_server_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvatarSkillDepotBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvatarSkillDepotBin) ProtoMessage() {}

func (x *AvatarSkillDepotBin) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvatarSkillDepotBin.ProtoReflect.Descriptor instead.
func (*AvatarSkillDepotBin) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{13}
}

func (x *AvatarSkillDepotBin) GetTalentIdList() []uint32 {
	if x != nil {
		return x.TalentIdList
	}
	return nil
}

func (x *AvatarSkillDepotBin) GetCoreProudSkillLevel() uint32 {
	if x != nil {
		return x.CoreProudSkillLevel
	}
	return 0
}

func (x *AvatarSkillDepotBin) GetInherentProudSkillList() []uint32 {
	if x != nil {
		return x.InherentProudSkillList
	}
	return nil
}

func (x *AvatarSkillDepotBin) GetSkillLevelMap() map[uint32]uint32 {
	if x != nil {
		return x.SkillLevelMap
	}
	return nil
}

type ItemBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Detail:
	//
	//	*ItemBin_Material
	//	*ItemBin_Equip
	Detail   isItemBin_Detail `protobuf_oneof:"detail"`
	ItemType uint32           `protobuf:"varint,1,opt,name=item_type,json=itemType,proto3" json:"item_type,omitempty"`
	ItemId   uint32           `protobuf:"varint,2,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	Guid     uint64           `protobuf:"fixed64,3,opt,name=guid,proto3" json:"guid,omitempty"`
}

func (x *ItemBin) Reset() {
	*x = ItemBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bin_server_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemBin) ProtoMessage() {}

func (x *ItemBin) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemBin.ProtoReflect.Descriptor instead.
func (*ItemBin) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{14}
}

func (m *ItemBin) GetDetail() isItemBin_Detail {
	if m != nil {
		return m.Detail
	}
	return nil
}

func (x *ItemBin) GetMaterial() *MaterialBin {
	if x, ok := x.GetDetail().(*ItemBin_Material); ok {
		return x.Material
	}
	return nil
}

func (x *ItemBin) GetEquip() *EquipBin {
	if x, ok := x.GetDetail().(*ItemBin_Equip); ok {
		return x.Equip
	}
	return nil
}

func (x *ItemBin) GetItemType() uint32 {
	if x != nil {
		return x.ItemType
	}
	return 0
}

func (x *ItemBin) GetItemId() uint32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *ItemBin) GetGuid() uint64 {
	if x != nil {
		return x.Guid
	}
	return 0
}

type isItemBin_Detail interface {
	isItemBin_Detail()
}

type ItemBin_Material struct {
	Material *MaterialBin `protobuf:"bytes,101,opt,name=material,proto3,oneof"`
}

type ItemBin_Equip struct {
	Equip *EquipBin `protobuf:"bytes,102,opt,name=equip,proto3,oneof"`
}

func (*ItemBin_Material) isItemBin_Detail() {}

func (*ItemBin_Equip) isItemBin_Detail() {}

type MaterialBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count     uint32             `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	DeleteBin *MaterialDeleteBin `protobuf:"bytes,2,opt,name=delete_bin,json=deleteBin,proto3" json:"delete_bin,omitempty"`
}

func (x *MaterialBin) Reset() {
	*x = MaterialBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bin_server_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaterialBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaterialBin) ProtoMessage() {}

func (x *MaterialBin) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaterialBin.ProtoReflect.Descriptor instead.
func (*MaterialBin) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{15}
}

func (x *MaterialBin) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *MaterialBin) GetDeleteBin() *MaterialDeleteBin {
	if x != nil {
		return x.DeleteBin
	}
	return nil
}

type MaterialDeleteBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeleteTimeNumMap map[uint32]uint32 `protobuf:"bytes,1,rep,name=delete_time_num_map,json=deleteTimeNumMap,proto3" json:"delete_time_num_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *MaterialDeleteBin) Reset() {
	*x = MaterialDeleteBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bin_server_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaterialDeleteBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaterialDeleteBin) ProtoMessage() {}

func (x *MaterialDeleteBin) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaterialDeleteBin.ProtoReflect.Descriptor instead.
func (*MaterialDeleteBin) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{16}
}

func (x *MaterialDeleteBin) GetDeleteTimeNumMap() map[uint32]uint32 {
	if x != nil {
		return x.DeleteTimeNumMap
	}
	return nil
}

type EquipBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Detail:
	//
	//	*EquipBin_Reliquary
	//	*EquipBin_Weapon
	Detail isEquipBin_Detail `protobuf_oneof:"detail"`
}

func (x *EquipBin) Reset() {
	*x = EquipBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bin_server_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EquipBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipBin) ProtoMessage() {}

func (x *EquipBin) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipBin.ProtoReflect.Descriptor instead.
func (*EquipBin) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{17}
}

func (m *EquipBin) GetDetail() isEquipBin_Detail {
	if m != nil {
		return m.Detail
	}
	return nil
}

func (x *EquipBin) GetReliquary() *ReliquaryBin {
	if x, ok := x.GetDetail().(*EquipBin_Reliquary); ok {
		return x.Reliquary
	}
	return nil
}

func (x *EquipBin) GetWeapon() *WeaponBin {
	if x, ok := x.GetDetail().(*EquipBin_Weapon); ok {
		return x.Weapon
	}
	return nil
}

type isEquipBin_Detail interface {
	isEquipBin_Detail()
}

type EquipBin_Reliquary struct {
	Reliquary *ReliquaryBin `protobuf:"bytes,101,opt,name=reliquary,proto3,oneof"`
}

type EquipBin_Weapon struct {
	Weapon *WeaponBin `protobuf:"bytes,102,opt,name=weapon,proto3,oneof"`
}

func (*EquipBin_Reliquary) isEquipBin_Detail() {}

func (*EquipBin_Weapon) isEquipBin_Detail() {}

type ReliquaryBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level            uint32   `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
	Exp              uint32   `protobuf:"varint,2,opt,name=exp,proto3" json:"exp,omitempty"`
	MainPropId       uint32   `protobuf:"varint,4,opt,name=main_prop_id,json=mainPropId,proto3" json:"main_prop_id,omitempty"`
	AppendPropIdList []uint32 `protobuf:"varint,5,rep,packed,name=append_prop_id_list,json=appendPropIdList,proto3" json:"append_prop_id_list,omitempty"`
}

func (x *ReliquaryBin) Reset() {
	*x = ReliquaryBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bin_server_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReliquaryBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReliquaryBin) ProtoMessage() {}

func (x *ReliquaryBin) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReliquaryBin.ProtoReflect.Descriptor instead.
func (*ReliquaryBin) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{18}
}

func (x *ReliquaryBin) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *ReliquaryBin) GetExp() uint32 {
	if x != nil {
		return x.Exp
	}
	return 0
}

func (x *ReliquaryBin) GetMainPropId() uint32 {
	if x != nil {
		return x.MainPropId
	}
	return 0
}

func (x *ReliquaryBin) GetAppendPropIdList() []uint32 {
	if x != nil {
		return x.AppendPropIdList
	}
	return nil
}

type WeaponBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level        uint32            `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
	Exp          uint32            `protobuf:"varint,2,opt,name=exp,proto3" json:"exp,omitempty"`
	PromoteLevel uint32            `protobuf:"varint,3,opt,name=promote_level,json=promoteLevel,proto3" json:"promote_level,omitempty"`
	AffixMap     map[uint32]uint32 `protobuf:"bytes,4,rep,name=affix_map,json=affixMap,proto3" json:"affix_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *WeaponBin) Reset() {
	*x = WeaponBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bin_server_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WeaponBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeaponBin) ProtoMessage() {}

func (x *WeaponBin) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeaponBin.ProtoReflect.Descriptor instead.
func (*WeaponBin) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{19}
}

func (x *WeaponBin) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *WeaponBin) GetExp() uint32 {
	if x != nil {
		return x.Exp
	}
	return 0
}

func (x *WeaponBin) GetPromoteLevel() uint32 {
	if x != nil {
		return x.PromoteLevel
	}
	return 0
}

func (x *WeaponBin) GetAffixMap() map[uint32]uint32 {
	if x != nil {
		return x.AffixMap
	}
	return nil
}

type AvatarEquipAffixBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Cd         uint32 `protobuf:"varint,2,opt,name=cd,proto3" json:"cd,omitempty"`
	PassCdTime uint32 `protobuf:"varint,3,opt,name=pass_cd_time,json=passCdTime,proto3" json:"pass_cd_time,omitempty"`
}

func (x *AvatarEquipAffixBin) Reset() {
	*x = AvatarEquipAffixBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bin_server_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvatarEquipAffixBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvatarEquipAffixBin) ProtoMessage() {}

func (x *AvatarEquipAffixBin) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvatarEquipAffixBin.ProtoReflect.Descriptor instead.
func (*AvatarEquipAffixBin) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{20}
}

func (x *AvatarEquipAffixBin) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AvatarEquipAffixBin) GetCd() uint32 {
	if x != nil {
		return x.Cd
	}
	return 0
}

func (x *AvatarEquipAffixBin) GetPassCdTime() uint32 {
	if x != nil {
		return x.PassCdTime
	}
	return 0
}

type VectorBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X float32 `protobuf:"fixed32,1,opt,name=x,proto3" json:"x,omitempty"`
	Y float32 `protobuf:"fixed32,2,opt,name=y,proto3" json:"y,omitempty"`
	Z float32 `protobuf:"fixed32,3,opt,name=z,proto3" json:"z,omitempty"`
}

func (x *VectorBin) Reset() {
	*x = VectorBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bin_server_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VectorBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VectorBin) ProtoMessage() {}

func (x *VectorBin) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VectorBin.ProtoReflect.Descriptor instead.
func (*VectorBin) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{21}
}

func (x *VectorBin) GetX() float32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *VectorBin) GetY() float32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *VectorBin) GetZ() float32 {
	if x != nil {
		return x.Z
	}
	return 0
}

type PlayerData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid           uint32 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`                                             // uid
	Nickname      string `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname,omitempty"`                                    // 昵称
	LastLoginTime uint32 `protobuf:"fixed32,3,opt,name=last_login_time,json=lastLoginTime,proto3" json:"last_login_time,omitempty"` // 最后登录时间
	Bin           []byte `protobuf:"bytes,4,opt,name=bin,proto3" json:"bin,omitempty"`                                              // 数据
	DataVersion   uint32 `protobuf:"varint,5,opt,name=data_version,json=dataVersion,proto3" json:"data_version,omitempty"`          // 数据版本
	Level         uint32 `protobuf:"varint,6,opt,name=level,proto3" json:"level,omitempty"`                                         // 等级
	Exp           uint32 `protobuf:"varint,7,opt,name=exp,proto3" json:"exp,omitempty"`                                             // 经验
	JsonData      string `protobuf:"bytes,8,opt,name=json_data,json=jsonData,proto3" json:"json_data,omitempty"`                    //
	ExtraBinData  []byte `protobuf:"bytes,9,opt,name=extra_bin_data,json=extraBinData,proto3" json:"extra_bin_data,omitempty"`      // 额外的数据
}

func (x *PlayerData) Reset() {
	*x = PlayerData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bin_server_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerData) ProtoMessage() {}

func (x *PlayerData) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerData.ProtoReflect.Descriptor instead.
func (*PlayerData) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{22}
}

func (x *PlayerData) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *PlayerData) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *PlayerData) GetLastLoginTime() uint32 {
	if x != nil {
		return x.LastLoginTime
	}
	return 0
}

func (x *PlayerData) GetBin() []byte {
	if x != nil {
		return x.Bin
	}
	return nil
}

func (x *PlayerData) GetDataVersion() uint32 {
	if x != nil {
		return x.DataVersion
	}
	return 0
}

func (x *PlayerData) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *PlayerData) GetExp() uint32 {
	if x != nil {
		return x.Exp
	}
	return 0
}

func (x *PlayerData) GetJsonData() string {
	if x != nil {
		return x.JsonData
	}
	return ""
}

func (x *PlayerData) GetExtraBinData() []byte {
	if x != nil {
		return x.ExtraBinData
	}
	return nil
}

var File_bin_server_proto protoreflect.FileDescriptor

var file_bin_server_proto_rawDesc = []byte{
	0x0a, 0x10, 0x62, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x76, 0x0a, 0x0d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x42, 0x69, 0x6e, 0x12, 0x30, 0x0a, 0x09, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x62, 0x69, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42,
	0x61, 0x73, 0x69, 0x63, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x52, 0x08, 0x62, 0x61, 0x73,
	0x69, 0x63, 0x42, 0x69, 0x6e, 0x12, 0x33, 0x0a, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f,
	0x62, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x52,
	0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x42, 0x69, 0x6e, 0x22, 0xd7, 0x0a, 0x0a, 0x12, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x78, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x65, 0x78, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63,
	0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63,
	0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a,
	0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x6e, 0x6f, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x4e, 0x6f, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65,
	0x72, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x69, 0x73, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12,
	0x2d, 0x0a, 0x13, 0x69, 0x73, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73,
	0x47, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x32,
	0x0a, 0x15, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x69, 0x6e,
	0x61, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x70,
	0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x75, 0x72, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73,
	0x74, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x11, 0x63, 0x75, 0x72, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x6d, 0x69,
	0x6e, 0x61, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x75, 0x72, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72,
	0x61, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x13, 0x63, 0x75, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x53,
	0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x12, 0x4b, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43, 0x6f, 0x6d, 0x70,
	0x42, 0x69, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x4d, 0x61, 0x70, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x07, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x44, 0x61, 0x79, 0x73,
	0x12, 0x33, 0x0a, 0x16, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x5f, 0x64, 0x61, 0x79, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x13, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x44, 0x61, 0x79,
	0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f,
	0x74, 0x61, 0x6b, 0x65, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x11, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x14, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x61,
	0x6b, 0x65, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x2c, 0x0a, 0x12, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a,
	0x15, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x67, 0x75, 0x65, 0x73, 0x74, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x47, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a,
	0x14, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x73, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12,
	0x28, 0x0a, 0x10, 0x73, 0x65, 0x74, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x61, 0x67, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x65, 0x74, 0x4c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x54, 0x61, 0x67, 0x12, 0x2f, 0x0a, 0x14, 0x68, 0x65, 0x61,
	0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x68, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x67, 0x75,
	0x69, 0x64, 0x5f, 0x73, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x67, 0x75, 0x69, 0x64, 0x53, 0x65, 0x71, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x13, 0x69, 0x73,
	0x5f, 0x72, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x73, 0x65, 0x6e,
	0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x52, 0x65, 0x62, 0x61, 0x74,
	0x65, 0x4d, 0x61, 0x69, 0x6c, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x17, 0x69, 0x73, 0x5f,
	0x72, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x73, 0x52, 0x65,
	0x62, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x70, 0x73,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x43, 0x70, 0x73, 0x1a, 0x3f, 0x0a, 0x11, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xc2, 0x09, 0x0a, 0x13, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x12, 0x2b, 0x0a, 0x0b,
	0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x42, 0x69, 0x6e, 0x52, 0x0a, 0x61,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x75, 0x72,
	0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x47, 0x75, 0x69,
	0x64, 0x12, 0x31, 0x0a, 0x0f, 0x70, 0x62, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x63, 0x75, 0x72,
	0x5f, 0x70, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x56, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x42, 0x69, 0x6e, 0x52, 0x0c, 0x70, 0x62, 0x4f, 0x6e, 0x6c, 0x79, 0x43, 0x75,
	0x72, 0x50, 0x6f, 0x73, 0x12, 0x31, 0x0a, 0x0f, 0x70, 0x62, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x5f,
	0x63, 0x75, 0x72, 0x5f, 0x72, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x69, 0x6e, 0x52, 0x0c, 0x70, 0x62, 0x4f, 0x6e, 0x6c,
	0x79, 0x43, 0x75, 0x72, 0x52, 0x6f, 0x74, 0x12, 0x3c, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x5f,
	0x6d, 0x61, 0x70, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x2e,
	0x54, 0x65, 0x61, 0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x74, 0x65,
	0x61, 0x6d, 0x4d, 0x61, 0x70, 0x12, 0x1e, 0x0a, 0x0b, 0x63, 0x75, 0x72, 0x5f, 0x74, 0x65, 0x61,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x75, 0x72, 0x54,
	0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x12,
	0x69, 0x73, 0x5f, 0x73, 0x70, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x75,
	0x73, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x53, 0x70, 0x72, 0x69,
	0x6e, 0x67, 0x41, 0x75, 0x74, 0x6f, 0x55, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x73, 0x70, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x73, 0x70, 0x72, 0x69,
	0x6e, 0x67, 0x41, 0x75, 0x74, 0x6f, 0x55, 0x73, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x12, 0x4a, 0x0a, 0x22, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f,
	0x75, 0x64, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x07, 0x52, 0x1e, 0x6c, 0x61,
	0x73, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x64, 0x41, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11,
	0x63, 0x75, 0x72, 0x5f, 0x73, 0x70, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x63, 0x75, 0x72, 0x53, 0x70, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x66,
	0x6c, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73,
	0x46, 0x6c, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x69, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f,
	0x67, 0x75, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74,
	0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x47, 0x75, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x68,
	0x6f, 0x6f, 0x73, 0x65, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x67, 0x75, 0x69, 0x64,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x63, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x41, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x47, 0x75, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x69, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x64, 0x69, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x74, 0x65, 0x6d, 0x70, 0x5f, 0x61, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x11, 0x20, 0x03,
	0x28, 0x04, 0x52, 0x12, 0x74, 0x65, 0x6d, 0x70, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x47, 0x75,
	0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x5c, 0x0a, 0x14, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x12,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x2e, 0x41, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x54, 0x65, 0x61, 0x6d, 0x42, 0x75, 0x66, 0x66, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x11, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x42, 0x75, 0x66,
	0x66, 0x4d, 0x61, 0x70, 0x12, 0x2f, 0x0a, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x42, 0x75,
	0x66, 0x66, 0x55, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x65,
	0x78, 0x70, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x65, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x12, 0x2e, 0x0a, 0x13, 0x6f, 0x77, 0x6e, 0x65, 0x64,
	0x5f, 0x66, 0x6c, 0x79, 0x63, 0x6c, 0x6f, 0x61, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x15,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x11, 0x6f, 0x77, 0x6e, 0x65, 0x64, 0x46, 0x6c, 0x79, 0x63, 0x6c,
	0x6f, 0x61, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x4a, 0x0a, 0x0c, 0x54, 0x65, 0x61, 0x6d, 0x4d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x41, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x54, 0x65, 0x61, 0x6d, 0x42, 0x69, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x54, 0x0a, 0x16, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x54, 0x65, 0x61,
	0x6d, 0x42, 0x75, 0x66, 0x66, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x24, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x42, 0x75, 0x66, 0x66, 0x42, 0x69, 0x6e, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xec, 0x08, 0x0a, 0x09, 0x41, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x42, 0x69, 0x6e, 0x12, 0x37, 0x0a, 0x0d, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x6c, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x42, 0x69, 0x6e,
	0x48, 0x00, 0x52, 0x0c, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x12, 0x34, 0x0a, 0x0c, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x41, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x42, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x72, 0x69, 0x61, 0x6c,
	0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x37, 0x0a, 0x0d, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x42, 0x69, 0x6e, 0x48,
	0x00, 0x52, 0x0c, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12,
	0x1f, 0x0a, 0x0b, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x67, 0x75, 0x69,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x69, 0x66, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6c, 0x69, 0x66,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x75, 0x72, 0x5f, 0x68, 0x70,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x63, 0x75, 0x72, 0x48, 0x70, 0x12, 0x26, 0x0a,
	0x0f, 0x63, 0x75, 0x72, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x45, 0x6c, 0x65, 0x6d, 0x45,
	0x6e, 0x65, 0x72, 0x67, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x72,
	0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x6b,
	0x69, 0x6c, 0x6c, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x44, 0x65, 0x70, 0x6f, 0x74, 0x49, 0x64,
	0x12, 0x35, 0x0a, 0x09, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x42, 0x69, 0x6e, 0x2e,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x73,
	0x6b, 0x69, 0x6c, 0x6c, 0x4d, 0x61, 0x70, 0x12, 0x32, 0x0a, 0x08, 0x62, 0x75, 0x66, 0x66, 0x5f,
	0x6d, 0x61, 0x70, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x41, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x42, 0x69, 0x6e, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x07, 0x62, 0x75, 0x66, 0x66, 0x4d, 0x61, 0x70, 0x12, 0x35, 0x0a, 0x09, 0x64,
	0x65, 0x70, 0x6f, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x42, 0x69, 0x6e, 0x2e, 0x44, 0x65, 0x70, 0x6f, 0x74,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x64, 0x65, 0x70, 0x6f, 0x74, 0x4d,
	0x61, 0x70, 0x12, 0x27, 0x0a, 0x0a, 0x65, 0x71, 0x75, 0x69, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x69, 0x6e,
	0x52, 0x09, 0x65, 0x71, 0x75, 0x69, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73,
	0x61, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0c, 0x73, 0x61, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c,
	0x12, 0x34, 0x0a, 0x16, 0x73, 0x61, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65,
	0x6e, 0x61, 0x6c, 0x74, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x14, 0x73, 0x61, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x6e, 0x61, 0x6c,
	0x74, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6c, 0x79, 0x63, 0x6c, 0x6f,
	0x61, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x66, 0x6c, 0x79,
	0x63, 0x6c, 0x6f, 0x61, 0x6b, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x17, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x5f, 0x61, 0x66, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x41, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x45, 0x71, 0x75, 0x69, 0x70, 0x41, 0x66, 0x66, 0x69, 0x78, 0x42, 0x69, 0x6e, 0x52, 0x14,
	0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x45, 0x71, 0x75, 0x69, 0x70, 0x41, 0x66, 0x66, 0x69, 0x78,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x6f, 0x72, 0x6e, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x62, 0x6f, 0x72, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x1a, 0x4c, 0x0a, 0x0d, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x25, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x42, 0x69, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x4a, 0x0a, 0x0c, 0x42, 0x75, 0x66, 0x66, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x24, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x42, 0x75, 0x66, 0x66, 0x42, 0x69, 0x6e,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x51, 0x0a, 0x0d, 0x44,
	0x65, 0x70, 0x6f, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x44, 0x65, 0x70, 0x6f, 0x74,
	0x42, 0x69, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x08,
	0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x87, 0x01, 0x0a, 0x0d, 0x41, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x42, 0x69, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x04, 0x52, 0x0e, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x47, 0x75, 0x69, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x2f, 0x0a, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x5f, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x11, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x75, 0x72, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x47, 0x75,
	0x69, 0x64, 0x22, 0x64, 0x0a, 0x0d, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x42, 0x75, 0x66, 0x66,
	0x42, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x62, 0x75, 0x66, 0x66, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x62, 0x75, 0x66, 0x66, 0x55, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62,
	0x75, 0x66, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x62, 0x75, 0x66, 0x66, 0x54, 0x79, 0x70, 0x65, 0x22, 0xff, 0x01, 0x0a, 0x0f, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x6c, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x42, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03,
	0x65, 0x78, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x65, 0x78, 0x70, 0x12, 0x26,
	0x0a, 0x0f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0d, 0x65, 0x71, 0x75, 0x69, 0x70, 0x47, 0x75,
	0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x06, 0x66, 0x65, 0x74, 0x74, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x46,
	0x65, 0x74, 0x74, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x52, 0x06, 0x66, 0x65, 0x74, 0x74, 0x65, 0x72,
	0x12, 0x3d, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x41, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x45, 0x78, 0x70, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x52,
	0x0e, 0x65, 0x78, 0x70, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x2e, 0x0a, 0x13, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x69, 0x73, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x22, 0xa7, 0x01, 0x0a, 0x0f, 0x41,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x46, 0x65, 0x74, 0x74, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x78, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x65, 0x78, 0x70, 0x12, 0x3b, 0x0a, 0x1a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x65, 0x64, 0x5f, 0x66, 0x65, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x17, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x65, 0x64, 0x46, 0x65, 0x74, 0x74, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x69, 0x73, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f,
	0x6f, 0x6e, 0x5f, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x11, 0x69, 0x73, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x4f, 0x6e, 0x42, 0x69, 0x72, 0x74,
	0x68, 0x64, 0x61, 0x79, 0x22, 0xc5, 0x01, 0x0a, 0x13, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x45,
	0x78, 0x70, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x65, 0x78, 0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x6f, 0x75,
	0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x68, 0x6f,
	0x75, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x07, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x68, 0x6f, 0x72, 0x74,
	0x65, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c,
	0x73, 0x68, 0x6f, 0x72, 0x74, 0x65, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x22, 0x7e, 0x0a, 0x0e,
	0x54, 0x72, 0x69, 0x61, 0x6c, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x42, 0x69, 0x6e, 0x12, 0x26,
	0x0a, 0x0f, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x41, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x10, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x5f,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x47, 0x72,
	0x61, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x69, 0x6e, 0x52, 0x0e, 0x67, 0x72,
	0x61, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x69, 0x6e, 0x22, 0x9f, 0x01, 0x0a,
	0x19, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x47, 0x72, 0x61, 0x6e,
	0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x69, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x72,
	0x61, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x2f, 0x0a,
	0x14, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x66, 0x72, 0x6f,
	0x6d, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x2e,
	0x0a, 0x0b, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x0b, 0x0a,
	0x07, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x47, 0x52,
	0x41, 0x4e, 0x54, 0x5f, 0x42, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x01, 0x22, 0x11,
	0x0a, 0x0f, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x42, 0x69,
	0x6e, 0x22, 0x5d, 0x0a, 0x0e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x42, 0x69, 0x6e, 0x12, 0x20, 0x0a, 0x0c, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x63, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x43,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x11, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x63, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x0e, 0x66, 0x75, 0x6c, 0x6c, 0x43, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0xbe, 0x02, 0x0a, 0x13, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x44, 0x65, 0x70, 0x6f, 0x74, 0x42, 0x69, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x61, 0x6c, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x0c, 0x74, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x33,
	0x0a, 0x16, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x75, 0x64, 0x5f, 0x73, 0x6b, 0x69,
	0x6c, 0x6c, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13,
	0x63, 0x6f, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x75, 0x64, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x39, 0x0a, 0x19, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x70, 0x72, 0x6f, 0x75, 0x64, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x16, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x74,
	0x50, 0x72, 0x6f, 0x75, 0x64, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4f,
	0x0a, 0x0f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6d, 0x61,
	0x70, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x44, 0x65, 0x70, 0x6f, 0x74, 0x42, 0x69, 0x6e, 0x2e, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0d, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4d, 0x61, 0x70, 0x1a,
	0x40, 0x0a, 0x12, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xac, 0x01, 0x0a, 0x07, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x69, 0x6e, 0x12, 0x2a, 0x0a,
	0x08, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x42, 0x69, 0x6e, 0x48, 0x00, 0x52,
	0x08, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x21, 0x0a, 0x05, 0x65, 0x71, 0x75,
	0x69, 0x70, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70,
	0x42, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x05, 0x65, 0x71, 0x75, 0x69, 0x70, 0x12, 0x1b, 0x0a, 0x09,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x69, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x22, 0x56, 0x0a, 0x0b, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x42, 0x69, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f,
	0x62, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x4d, 0x61, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x69, 0x6e, 0x52, 0x09, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x69, 0x6e, 0x22, 0xb1, 0x01, 0x0a, 0x11, 0x4d, 0x61, 0x74,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x57,
	0x0a, 0x13, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6e, 0x75,
	0x6d, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x4d, 0x61,
	0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x69, 0x6e, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4e, 0x75, 0x6d, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x4e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x1a, 0x43, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x4e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x69, 0x0a, 0x08,
	0x45, 0x71, 0x75, 0x69, 0x70, 0x42, 0x69, 0x6e, 0x12, 0x2d, 0x0a, 0x09, 0x72, 0x65, 0x6c, 0x69,
	0x71, 0x75, 0x61, 0x72, 0x79, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x52, 0x65,
	0x6c, 0x69, 0x71, 0x75, 0x61, 0x72, 0x79, 0x42, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65,
	0x6c, 0x69, 0x71, 0x75, 0x61, 0x72, 0x79, 0x12, 0x24, 0x0a, 0x06, 0x77, 0x65, 0x61, 0x70, 0x6f,
	0x6e, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e,
	0x42, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x06, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x42, 0x08, 0x0a,
	0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x87, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x6c, 0x69,
	0x71, 0x75, 0x61, 0x72, 0x79, 0x42, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x10,
	0x0a, 0x03, 0x65, 0x78, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x65, 0x78, 0x70,
	0x12, 0x20, 0x0a, 0x0c, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x61, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x70,
	0x49, 0x64, 0x12, 0x2d, 0x0a, 0x13, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x6f,
	0x70, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x10, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x49, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0xcc, 0x01, 0x0a, 0x09, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x78, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x65, 0x78, 0x70, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x6d, 0x6f,
	0x74, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x35, 0x0a, 0x09,
	0x61, 0x66, 0x66, 0x69, 0x78, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x2e, 0x41, 0x66, 0x66, 0x69,
	0x78, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x61, 0x66, 0x66, 0x69, 0x78,
	0x4d, 0x61, 0x70, 0x1a, 0x3b, 0x0a, 0x0d, 0x41, 0x66, 0x66, 0x69, 0x78, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x57, 0x0a, 0x13, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x45, 0x71, 0x75, 0x69, 0x70, 0x41,
	0x66, 0x66, 0x69, 0x78, 0x42, 0x69, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x63, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x02, 0x63, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x70, 0x61, 0x73, 0x73, 0x5f,
	0x63, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70,
	0x61, 0x73, 0x73, 0x43, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x35, 0x0a, 0x09, 0x56, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x42, 0x69, 0x6e, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x01, 0x79, 0x12, 0x0c, 0x0a, 0x01, 0x7a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x7a,
	0x22, 0x82, 0x02, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x69,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a,
	0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x03, 0x62, 0x69, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x64,
	0x61, 0x74, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x10, 0x0a, 0x03, 0x65, 0x78, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x65,
	0x78, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x73, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x24, 0x0a, 0x0e, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x65, 0x78, 0x74, 0x72, 0x61, 0x42, 0x69,
	0x6e, 0x44, 0x61, 0x74, 0x61, 0x42, 0x0a, 0x5a, 0x08, 0x2e, 0x2f, 0x3b, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bin_server_proto_rawDescOnce sync.Once
	file_bin_server_proto_rawDescData = file_bin_server_proto_rawDesc
)

func file_bin_server_proto_rawDescGZIP() []byte {
	file_bin_server_proto_rawDescOnce.Do(func() {
		file_bin_server_proto_rawDescData = protoimpl.X.CompressGZIP(file_bin_server_proto_rawDescData)
	})
	return file_bin_server_proto_rawDescData
}

var file_bin_server_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_bin_server_proto_msgTypes = make([]protoimpl.MessageInfo, 32)
var file_bin_server_proto_goTypes = []interface{}{
	(TrialAvatarGrantRecordBin_GrantReason)(0), // 0: TrialAvatarGrantRecordBin.GrantReason
	(*PlayerDataBin)(nil),                      // 1: PlayerDataBin
	(*PlayerBasicCompBin)(nil),                 // 2: PlayerBasicCompBin
	(*PlayerAvatarCompBin)(nil),                // 3: PlayerAvatarCompBin
	(*AvatarBin)(nil),                          // 4: AvatarBin
	(*AvatarTeamBin)(nil),                      // 5: AvatarTeamBin
	(*AvatarBuffBin)(nil),                      // 6: AvatarBuffBin
	(*FormalAvatarBin)(nil),                    // 7: FormalAvatarBin
	(*AvatarFetterBin)(nil),                    // 8: AvatarFetterBin
	(*AvatarExpeditionBin)(nil),                // 9: AvatarExpeditionBin
	(*TrialAvatarBin)(nil),                     // 10: TrialAvatarBin
	(*TrialAvatarGrantRecordBin)(nil),          // 11: TrialAvatarGrantRecordBin
	(*MirrorAvatarBin)(nil),                    // 12: MirrorAvatarBin
	(*AvatarSkillBin)(nil),                     // 13: AvatarSkillBin
	(*AvatarSkillDepotBin)(nil),                // 14: AvatarSkillDepotBin
	(*ItemBin)(nil),                            // 15: ItemBin
	(*MaterialBin)(nil),                        // 16: MaterialBin
	(*MaterialDeleteBin)(nil),                  // 17: MaterialDeleteBin
	(*EquipBin)(nil),                           // 18: EquipBin
	(*ReliquaryBin)(nil),                       // 19: ReliquaryBin
	(*WeaponBin)(nil),                          // 20: WeaponBin
	(*AvatarEquipAffixBin)(nil),                // 21: AvatarEquipAffixBin
	(*VectorBin)(nil),                          // 22: VectorBin
	(*PlayerData)(nil),                         // 23: PlayerData
	nil,                                        // 24: PlayerBasicCompBin.OpenStateMapEntry
	nil,                                        // 25: PlayerAvatarCompBin.TeamMapEntry
	nil,                                        // 26: PlayerAvatarCompBin.AvatarTeamBuffMapEntry
	nil,                                        // 27: AvatarBin.SkillMapEntry
	nil,                                        // 28: AvatarBin.BuffMapEntry
	nil,                                        // 29: AvatarBin.DepotMapEntry
	nil,                                        // 30: AvatarSkillDepotBin.SkillLevelMapEntry
	nil,                                        // 31: MaterialDeleteBin.DeleteTimeNumMapEntry
	nil,                                        // 32: WeaponBin.AffixMapEntry
}
var file_bin_server_proto_depIdxs = []int32{
	2,  // 0: PlayerDataBin.basic_bin:type_name -> PlayerBasicCompBin
	3,  // 1: PlayerDataBin.avatar_bin:type_name -> PlayerAvatarCompBin
	24, // 2: PlayerBasicCompBin.open_state_map:type_name -> PlayerBasicCompBin.OpenStateMapEntry
	4,  // 3: PlayerAvatarCompBin.avatar_list:type_name -> AvatarBin
	22, // 4: PlayerAvatarCompBin.pb_only_cur_pos:type_name -> VectorBin
	22, // 5: PlayerAvatarCompBin.pb_only_cur_rot:type_name -> VectorBin
	25, // 6: PlayerAvatarCompBin.team_map:type_name -> PlayerAvatarCompBin.TeamMapEntry
	26, // 7: PlayerAvatarCompBin.avatar_team_buff_map:type_name -> PlayerAvatarCompBin.AvatarTeamBuffMapEntry
	7,  // 8: AvatarBin.formal_avatar:type_name -> FormalAvatarBin
	10, // 9: AvatarBin.trial_avatar:type_name -> TrialAvatarBin
	12, // 10: AvatarBin.mirror_avatar:type_name -> MirrorAvatarBin
	27, // 11: AvatarBin.skill_map:type_name -> AvatarBin.SkillMapEntry
	28, // 12: AvatarBin.buff_map:type_name -> AvatarBin.BuffMapEntry
	29, // 13: AvatarBin.depot_map:type_name -> AvatarBin.DepotMapEntry
	15, // 14: AvatarBin.equip_list:type_name -> ItemBin
	21, // 15: AvatarBin.avatar_equip_affix_list:type_name -> AvatarEquipAffixBin
	8,  // 16: FormalAvatarBin.fetter:type_name -> AvatarFetterBin
	9,  // 17: FormalAvatarBin.expedition_data:type_name -> AvatarExpeditionBin
	11, // 18: TrialAvatarBin.grant_record_bin:type_name -> TrialAvatarGrantRecordBin
	30, // 19: AvatarSkillDepotBin.skill_level_map:type_name -> AvatarSkillDepotBin.SkillLevelMapEntry
	16, // 20: ItemBin.material:type_name -> MaterialBin
	18, // 21: ItemBin.equip:type_name -> EquipBin
	17, // 22: MaterialBin.delete_bin:type_name -> MaterialDeleteBin
	31, // 23: MaterialDeleteBin.delete_time_num_map:type_name -> MaterialDeleteBin.DeleteTimeNumMapEntry
	19, // 24: EquipBin.reliquary:type_name -> ReliquaryBin
	20, // 25: EquipBin.weapon:type_name -> WeaponBin
	32, // 26: WeaponBin.affix_map:type_name -> WeaponBin.AffixMapEntry
	5,  // 27: PlayerAvatarCompBin.TeamMapEntry.value:type_name -> AvatarTeamBin
	6,  // 28: PlayerAvatarCompBin.AvatarTeamBuffMapEntry.value:type_name -> AvatarBuffBin
	13, // 29: AvatarBin.SkillMapEntry.value:type_name -> AvatarSkillBin
	6,  // 30: AvatarBin.BuffMapEntry.value:type_name -> AvatarBuffBin
	14, // 31: AvatarBin.DepotMapEntry.value:type_name -> AvatarSkillDepotBin
	32, // [32:32] is the sub-list for method output_type
	32, // [32:32] is the sub-list for method input_type
	32, // [32:32] is the sub-list for extension type_name
	32, // [32:32] is the sub-list for extension extendee
	0,  // [0:32] is the sub-list for field type_name
}

func init() { file_bin_server_proto_init() }
func file_bin_server_proto_init() {
	if File_bin_server_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_bin_server_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerDataBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bin_server_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerBasicCompBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bin_server_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerAvatarCompBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bin_server_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvatarBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bin_server_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvatarTeamBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bin_server_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvatarBuffBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bin_server_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FormalAvatarBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bin_server_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvatarFetterBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bin_server_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvatarExpeditionBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bin_server_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrialAvatarBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bin_server_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrialAvatarGrantRecordBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bin_server_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MirrorAvatarBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bin_server_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvatarSkillBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bin_server_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvatarSkillDepotBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bin_server_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bin_server_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaterialBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bin_server_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaterialDeleteBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bin_server_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EquipBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bin_server_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReliquaryBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bin_server_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WeaponBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bin_server_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvatarEquipAffixBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bin_server_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VectorBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bin_server_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_bin_server_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*AvatarBin_FormalAvatar)(nil),
		(*AvatarBin_TrialAvatar)(nil),
		(*AvatarBin_MirrorAvatar)(nil),
	}
	file_bin_server_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*ItemBin_Material)(nil),
		(*ItemBin_Equip)(nil),
	}
	file_bin_server_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*EquipBin_Reliquary)(nil),
		(*EquipBin_Weapon)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bin_server_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   32,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_bin_server_proto_goTypes,
		DependencyIndexes: file_bin_server_proto_depIdxs,
		EnumInfos:         file_bin_server_proto_enumTypes,
		MessageInfos:      file_bin_server_proto_msgTypes,
	}.Build()
	File_bin_server_proto = out.File
	file_bin_server_proto_rawDesc = nil
	file_bin_server_proto_goTypes = nil
	file_bin_server_proto_depIdxs = nil
}
